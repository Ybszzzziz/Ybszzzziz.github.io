{"meta":{"title":"unqyan's blog","subtitle":"","description":"","author":"BoShuaiYan","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Leetcode2681.英雄的力量","slug":"Leetcode2681.英雄的力量","date":"2023-12-01T02:22:31.000Z","updated":"2023-12-01T08:30:34.988Z","comments":true,"path":"2023/12/01/Leetcode2681.英雄的力量/","permalink":"http://example.com/2023/12/01/Leetcode2681.%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/","excerpt":"","text":"Leetcode2681.英雄的力量2681. 英雄的力量 - 力扣（LeetCode） 1.动态规划 + 前缀和​ 考虑如何计算一个nums [i]，0 &lt; i &lt; n，由于数组已经排好序，所以以nums [i] 结尾的子序列的最大值 就是nums [i]，所以可以只考虑所有子序列的最小值之和。设dp [ j ] 表示以 nums [ j ] 结尾的所有子序 列最小值之和，得到以下式子 ​ ​ 那么以nums [i] 结尾的全部子序列的英雄组力量和为 nums [i] * nums [i] * dp [i] ​ 计算dp [i] 需要 O (n) 的复杂度，总体复杂度为 n² ，会超时。所以可以使用前缀和数组prefix 进行优化 ​ prefix [i+1] &#x3D; prefix[i] + dp[i] ​ 初始式就可以优化为： ​ 123456789101112131415161718class Solution &#123; public int sumOfPower(int[] nums) &#123; Arrays.sort(nums); int n = nums.length; // 表示以i结尾的所有子序列的最小值之和 int[] dp = new int[n]; int[] prefix = new int[n + 1]; int mod = 1000000007; int res = 0; for (int i = 0 ; i &lt; n ; i ++) &#123; dp[i] = (nums[i] + prefix[i]) % mod; prefix[i + 1] = (prefix[i] + dp[i]) % mod; res = (int)((res + (long) nums[i] * nums[i] % mod * dp[i]) % mod); if (res &lt; 0) res += mod; &#125; return res; &#125;&#125; 2.滚动数组优化版​ 因为dp [i] 和 prefix [i] 的计算只与前一个状态有关，所以可以使用滚动数组来优化 12345678910111213141516class Solution &#123; public int sumOfPower(int[] nums) &#123; Arrays.sort(nums); int dp = 0, preSum = 0; int res = 0, mod = 1000000007; for (int i = 0; i &lt; nums.length; i++) &#123; dp = (nums[i] + preSum) % mod; preSum = (preSum + dp) % mod; res = (int) ((res + (long) nums[i] * nums[i] % mod * dp) % mod); if (res &lt; 0) &#123; res += mod; &#125; &#125; return res; &#125;&#125;","categories":[],"tags":[]},{"title":"first_post","slug":"first-post","date":"2023-11-30T02:22:31.000Z","updated":"2023-11-30T02:22:31.846Z","comments":true,"path":"2023/11/30/first-post/","permalink":"http://example.com/2023/11/30/first-post/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-11-30T01:48:51.241Z","updated":"2023-11-30T01:48:51.241Z","comments":true,"path":"2023/11/30/hello-world/","permalink":"http://example.com/2023/11/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}